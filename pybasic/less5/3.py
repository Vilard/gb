# 3. Есть два списка:
# tutors = [
#     'Иван', 'Анастасия', 'Петр', 'Сергей',
#     'Дмитрий', 'Борис', 'Елена'
# ]
# klasses = [
#     '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
# ]
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ...
# Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в списке klasses
# меньше элементов, чем в
# списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None), например:
# ('Станислав', None)
#
# ### Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения. Подумать, в
# каких ситуациях генератор даст эффект.
#
import itertools


tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена',
          'Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']


def f():
   return ((tutors, klasses) for tutors, klasses in itertools.zip_longest(tutors,klasses))


if __name__ == "__main__":
    tupl = f()

    print(type(tupl))
    print(next(tupl))
    print(next(tupl))
    print(next(tupl))
    print(next(tupl))
    print(next(tupl))
    print(next(tupl))
    print(next(tupl))
    print(next(tupl))
    print(next(tupl))
    print(next(tupl))
